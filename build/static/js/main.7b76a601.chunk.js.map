{"version":3,"sources":["serviceWorker.ts","chat.d.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","listener","obj","packet","this","send","stringify","listeners","splice","findIndex","args","filter","call","Error","TextInput","value","props","focus","setState","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","src","width","alt","unique_code","onClick","preventDefault","href","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toDateString","PureComponent","RightPane","onBack","id","senderId","onSend","referenceTo","contentType","Main","undefined","App","showLogin","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2RAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnD1D,IAyEIC,EAAQ,I,kDAnCf,aAAe,IAAD,8BACV,gBAHIC,QAEM,IADdC,MAAyB,KAGrB,EAAKD,GAAK,IAAIE,UAAU,+BACxB,EAAKF,GAAGG,iBAAiB,WAAW,SAAAC,GAAM,IAAD,EACjCC,EAAIC,KAAKC,MAAMH,EAAEI,MACrB,OAAQH,EAAEI,MACN,IAAK,QACDC,MAAML,EAAEM,SACR,MACJ,IAAK,QACD,EAAKV,MAAQI,EAAEJ,MACf,EAAKW,SAAS,SACd,MACJ,IAAK,UACD,IAAIC,EAAMR,EAAES,UACZ,YAAKb,MAAOc,cAAcC,MAAK,SAAAC,GAAC,OAAIA,EAAEH,YAAcD,YAApD,SAA0DK,aAAaC,KAAKd,EAAEM,SAC9E,EAAKC,SAAS,UAAWC,EAAKR,EAAEM,SAChC,MACJ,IAAK,WACD,EAAKC,SAAS,YACd,MACJ,IAAK,oBACD,EAAKX,MAAOc,cAAcI,KAAKd,EAAEe,cACjC,EAAKR,SAAS,eAAgBP,EAAEe,aAAaN,eAvB/C,E,6DATsBL,EAASY,EAAgBC,GACzD,wEAAuBb,EAAMY,EAAUC,K,6CAEpBA,GACnB,8EAA6BA,O,gDAmCfC,GACdC,KAAKxB,GAAGyB,KAAKnB,KAAKoB,UAAUH,Q,GArEpC,iDACYI,UAAwD,GADpE,6DAEwClB,EAASY,EAAgBC,GACzDE,KAAKG,UAAUR,KAAK,CAAEV,OAAMY,WAAUC,UAH9C,0CAK2Cb,EAASY,GAC5CG,KAAKG,UAAUC,OAAOJ,KAAKG,UAAUE,WAAU,SAAAZ,GAAC,OAAIA,EAAER,OAASA,GAAQQ,EAAEI,WAAaA,KAAW,KANzG,+BAS0CZ,GAAmB,IAAD,uBAANqB,EAAM,iCAANA,EAAM,sCAC/BN,KAAKG,UAAUI,QAAO,SAAAd,GAAC,OAAIA,EAAER,OAASA,MADP,IACpD,kCAASY,EAAT,SACI,EAAAA,EAASA,UAASW,KAAlB,SAAuBX,EAASC,KAAhC,OAAwCQ,KAFQ,iCAT5D,6CAc2BR,GACnB,IAAKA,EACD,MAAM,IAAIW,MAAM,uBACpBT,KAAKG,UAAYH,KAAKG,UAAUI,QAAO,SAAAd,GAAC,OAAIA,EAAEK,MAAQA,SAjB9D,O,QCzCaY,G,MAAb,4MACI3C,MAAQ,CAAE4C,MAAO,EAAKC,MAAMD,MAAOE,OAAO,GAD9C,2EAGwC,IAATF,EAAQ,EAARA,MACvBX,KAAKc,SAAL,eAAkBd,KAAKjC,MAAvB,CAA6B4C,aAJrC,+BAOc,IAAD,SACDI,EAAQ,GASZ,OARIf,KAAKY,MAAMI,YACXD,EAAME,WAAY,GAClBjB,KAAKY,MAAMM,UACXH,EAAMI,UAAY,SAAAvC,GACI,KAAdA,EAAEwC,SACF,EAAKR,MAAMM,YAInB,yBAAKG,UAAU,cACX,yCAAOpC,KAAI,UAAEe,KAAKY,MAAM3B,YAAb,QAAqB,OAAQ0B,MAAOX,KAAKjC,MAAM4C,MACtDW,SAAU,SAAA1C,GAAM,IAAD,IACX,EAAKkC,SAAS,CAAEH,MAAO/B,EAAE2C,OAAOZ,QAChC,eAAKC,OAAMU,gBAAX,gBAAsB1C,EAAE2C,OAAOZ,QAEnCa,OAAQ,kBAAM,EAAKV,SAAS,CAAED,OAAO,KACrCY,QAAS,kBAAM,EAAKX,SAAS,CAAED,OAAO,MACjCE,IACT,yBAAKM,UAAU,oBACf,2BAAOA,UAAWrB,KAAKjC,MAAM4C,OAASX,KAAKjC,MAAM8C,MAAQ,WAAa,IACjEb,KAAKY,MAAMc,kBA7BhC,GAA+BC,cCRlBC,EAAb,4MACI7D,MAAQ,CAAE8D,MAAO,GAAIC,SAAU,GAAIC,YAAa,GAAIvE,UAAU,GADlE,uDAGc,IAAD,OACL,OACI,yBAAK6D,UAAU,SACX,yBAAKW,IAAI,cAAcC,MAAM,MAAMC,IAAI,KACvC,kBAAC,EAAD,CAAWjD,KAAK,QAAQyC,YAAY,8BAA8Bf,MAAOX,KAAKjC,MAAM8D,MAChFP,SAAU,SAAA1C,GAAC,OAAI,EAAKuD,YAAYvD,IAAIoC,WAAW,EAAME,QAAU,kBAAM,EAAKkB,aAC9E,kBAAC,EAAD,CAAWnD,KAAK,WAAWyC,YAAY,WAAWf,MAAOX,KAAKjC,MAAM+D,SAChER,SAAU,SAAA1C,GAAC,OAAI,EAAKkC,SAAS,CAAEgB,SAAUlD,KAAMsC,QAAU,kBAAM,EAAKkB,aACxE,4BAAQnD,KAAK,SAASmD,QAAS,kBAAM,EAAKA,YACrCpC,KAAKjC,MAAMP,SAAW,WAAa,SAEvCwC,KAAKjC,MAAMP,UACR,kBAAC,EAAD,CAAWyB,KAAK,OAAOyC,YAAY,6BAA6Bf,MAAOX,KAAKjC,MAAMgE,YAC9ET,SAAU,SAAA1C,GAAC,OAAI,EAAKkC,SAAS,CAAEiB,YAAanD,KAAMsC,QAAU,kBAAM,EAAKkB,aAC/E,2BAAIpC,KAAKjC,MAAMP,SAAW,kBAAoB,+BAC1C,4BAAQ4E,QAAS,SAAAxD,GAAOA,EAAEyD,iBAAkB,EAAKvB,SAAS,CAAEtD,UAAW,EAAKO,MAAMP,aAC7EwC,KAAKjC,MAAMP,SAAW,QAAU,aAIzC,uBAAG8E,KAAK,0CAAR,qBAvBhB,kCA2BgB1D,GACE,WAANA,GACAoB,KAAKc,SAAS,CAACe,MAAOjD,EAAGmD,YAAa,YAE1C/B,KAAKc,SAAS,CAACe,MAAOjD,MA/B9B,gCAmCYoB,KAAKjC,MAAMP,SACXe,EAAMgE,WAAW,CACbtD,KAAM,WAAY4C,MAAO7B,KAAKjC,MAAM8D,MAAOC,SAAU9B,KAAKjC,MAAM+D,SAChEC,YAAa/B,KAAKjC,MAAMgE,YAAaS,cAAc,IAGvDjE,EAAMgE,WAAW,CACbtD,KAAM,QAAS4C,MAAO7B,KAAKjC,MAAM8D,MAAOC,SAAU9B,KAAKjC,MAAM+D,SAC7DU,cAAc,QA3C9B,GAA2Bb,aCIdc,EAAb,4MAEIC,UAAYC,IAAMC,YAFtB,wDAIe,IAAD,WACN,WAAI,EAAA5C,KAAKY,OAAMwB,eAAf,aAAI,6BAAqBpC,KAAK0C,UAAUG,eAApC,aAAqB,EAAwB9E,MAAM4C,aAAnD,QAA4D,OAC5D,UAAAX,KAAK0C,UAAUG,eAAf,SAAwB/B,SAAS,CAAEH,MAAO,QANtD,+BASc,IAAD,OACL,OACI,yBAAKU,UAAU,yBACX,kBAAC,EAAD,iBAAerB,KAAKY,MAApB,CAA2BkC,IAAK9C,KAAK0C,UAAWxB,QAAS,kBAAM,EAAKkB,cACpE,4BAAQnD,KAAK,SAASmD,QAAS,kBAAM,EAAKA,YACrCpC,KAAKY,MAAMmC,oBAdhC,GAAwCpB,aCL3BqB,EAAb,uKAMc,IAAD,OACDC,EAAcjD,KAAKY,MAAMhB,aAAaF,aAAawD,OAAS,EAC5DlD,KAAKY,MAAMhB,aAAaF,aAAaM,KAAKY,MAAMhB,aAAaF,aAAawD,OAAS,GAAK,KAC5F,OACI,yBAAK7B,UAAW,qBAAuBrB,KAAKY,MAAMuC,SAAW,YAAc,IACvEf,QAAS,kBAAM,EAAKxB,MAAMwC,aAC1B,yBAAK/B,UAAU,OACX,0BAAMA,UAAU,gBAAgBrB,KAAKY,MAAMhB,aAAayD,MACxD,0BAAMhC,UAAU,QACX4B,GAAe,IAAIK,KAAKL,EAAYM,WAAWC,uBAGxD,0BAAMnC,UAAU,gBAAhB,OAAgC4B,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAaQ,YAlB7D,0CAuByB,IAAD,OAChBlF,EAAMI,iBAAiB,WAAW,SAACU,EAAKqE,GAChCrE,IAAQ,EAAKuB,MAAMhB,aAAaN,WAChC,EAAKqE,gBACV3D,QA3BX,6CA8BQzB,EAAMqF,uBAAuB5D,UA9BrC,GAAsC2B,aCEzBkC,EAAb,uKAKc,IAAD,OACL,OACI,yBAAKxC,UAAU,aACX,uBAAGA,UAAU,UAAb,WAA+BrB,KAAKY,MAAMnC,MAAMqF,KAAKC,KACrD,kBAAC,EAAD,CAAoB9E,KAAK,OAAOyC,YAAY,6BACxCqB,cAAc,MACdX,QAAS,SAAA4B,GAAI,OAAI,EAAKC,mBAAmBD,MAC7C,yBAAK3C,UAAU,iBACVrB,KAAKY,MAAMnC,MAAMc,cAAc2E,KAAI,SAAAzE,GAAC,OACjC,kBAAC,EAAD,CACI0E,IAAK1E,EAAEH,UACPM,aAAcH,EACd0D,SAAU1D,IAAM,EAAKmB,MAAMwD,qBAC3BhB,SAAU,kBAAM,EAAKxC,MAAMwC,SAAS3D,aAlBhE,yCAwBuBoC,GAEf,OADAtD,EAAMgE,WAAW,CAAEtD,KAAM,iBAAkB4C,QAAOwC,aAAc,WACzD,IA1Bf,0CA6ByB,IAAD,OAChB9F,EAAMI,iBAAiB,gBAAgB,SAAA2F,GAAC,OAAI,EAAKX,gBAAe3D,QA9BxE,6CAkCQzB,EAAMqF,uBAAuB5D,UAlCrC,GAA8B2B,aCFjB4C,EAAb,uKAGQ,OACI,yBAAKlD,UAAW,gBAAkBrB,KAAKY,MAAM4D,IAAM,OAAS,KACxD,yBAAKnD,UAAU,UACX,0BAAMA,UAAU,QAAQrB,KAAKY,MAAMzB,QAAQsE,SAC3C,0BAAMpC,UAAU,QACX,IAAIiC,KAAKtD,KAAKY,MAAMzB,QAAQoE,WAAWkB,sBARhE,GAAiCC,iBCGpBC,EAAb,uKAEc,IAAD,WACL,OACI,yBAAKtD,UAAU,qBACVrB,KAAKY,MAAMhB,cACR,oCACI,yBAAKyB,UAAU,2BACX,4BAAQpC,KAAK,SAASoC,UAAU,cAC5Be,QAAS,kBAAM,EAAKxB,MAAMgE,WAD9B,QAEA,qCAAI5E,KAAKY,MAAMhB,oBAAf,aAAI,EAAyByD,OAEjC,yBAAKhC,UAAU,YAAf,UACKrB,KAAKY,MAAMhB,oBADhB,aACK,EAAyBF,aAAawE,KAAI,SAAAzE,GAAC,aACxC,kBAAC,EAAD,CAAa0E,IAAK1E,EAAEoF,GAAI1F,QAASM,EAC7B+E,IAAK/E,EAAEqF,YAAF,UAAevG,EAAME,aAArB,aAAe,EAAaqF,KAAKe,UAElD,yBAAKxD,UAAU,oBACX,kBAAC,EAAD,CAAoBpC,KAAK,OAAOyC,YAAY,iCACxCqB,cAAc,OAAOX,QAAS,SAAA3C,GAAC,OAAI,EAAKsF,OAAOtF,WAnB/E,0CA2ByB,IAAD,OAChBlB,EAAMI,iBAAiB,WAAW,SAACU,EAAKqE,GAAO,IAAD,EACtCrE,KAAG,UAAK,EAAKuB,MAAMhB,oBAAhB,aAAK,EAAyBN,YACjC,EAAKqE,gBACV3D,QA/BX,6CAmCQzB,EAAMqF,uBAAuB5D,QAnCrC,6BAsCWgE,GAKH,OAJAzF,EAAMgE,WAAW,CACbtD,KAAM,UAAWK,UAAWU,KAAKY,MAAMhB,aAAcN,UAAW0F,YAAa,EAC3EC,YAAa,EAAGxB,QAAS,KAAOO,KAE/B,MA3Cf,GAA+BrC,aCDlBuD,EAAb,4MACInH,MAAQ,CAAEqG,0BAAsBe,GADpC,uDAEc,IAAD,OACD9D,EAAY,aAAerB,KAAKjC,MAAMqG,qBAAuB,QAAU,QAC3E,OACI,yBAAK/C,UAAWA,GACZ,kBAAC,EAAD,CACI5C,MAAOF,EAAME,MACb2F,qBAAsBpE,KAAKjC,MAAMqG,qBACjChB,SAAU,SAAAkB,GAAC,OAAI,EAAKxD,SAAS,CAAEsD,qBAAsBE,OACzD,kBAAC,EAAD,CAAW1E,aAAcI,KAAKjC,MAAMqG,qBAChCQ,OAAQ,kBAAM,EAAK9D,SAAS,CAAEsD,0BAAsBe,YAXxE,GAA0BxD,aCDLyD,E,4MACnBrH,MAAQ,CAAEsH,WAAW,G,kEAEA,IAAD,OAClB9G,EAAMI,iBAAkB,SAAS,WAAQ,EAAKmC,SAAS,CAAEuE,WAAW,S,+BAIpE,OACE,yBAAKhE,UAAU,OACZrB,KAAKjC,MAAMsH,UAAY,kBAAC,EAAD,MAAY,kBAAC,EAAD,W,GAVX1D,aCEjC2D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SXiBnB,SAAkBrI,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqI,IACpBC,IACA7I,OAAOC,SAASsF,MAEJuD,SAAW9I,OAAOC,SAAS6I,OAIvC,OAGF9I,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMwI,IAAN,sBAEP/I,IAgEV,SAAiCO,EAAeC,GAE9CyI,MAAM1I,EAAO,CACX2I,QAAS,CAAE,iBAAkB,YAE5BtI,MAAK,SAAAuI,GAEJ,IAAMf,EAAce,EAASD,QAAQE,IAAI,gBAEnB,MAApBD,EAASE,QACO,MAAfjB,IAA8D,IAAvCA,EAAYkB,QAAQ,cAG5C7I,UAAUC,cAAc6I,MAAM3I,MAAK,SAAAC,GACjCA,EAAa2I,aAAa5I,MAAK,WAC7BV,OAAOC,SAASsJ,eAKpBnJ,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAqI,CAAwBnJ,EAAOC,GAI/BC,UAAUC,cAAc6I,MAAM3I,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OW1C/BE,K","file":"static/js/main.7b76a601.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./serviceWorker\";\r\n\r\nexport interface MessageDto {\r\n    id: number;\r\n    timeStamp: string;\r\n    referenceTo: number; // 0: normal message, +: update, -: delete\r\n    senderId: string;\r\n    contentType: number;\r\n    content: string;\r\n}\r\n\r\nexport interface UserDto {\r\n    id: string;\r\n    displayName: string;\r\n    tag: string;\r\n    lastSeen: string;\r\n}\r\n\r\nexport interface ConversationDto {\r\n    channelId: string;\r\n    parentChannelId: string;\r\n    name: string;\r\n    description: string;\r\n    data: string;\r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\r\n    access: number; // none, read, write, admin\r\n    notificationLevel: number; // none, gray, push\r\n    unreadCount: number;\r\n    memberIds: string[];\r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {\r\n    user: UserDto;\r\n    contacts: UserDto[];\r\n    conversations: ConversationDto[];\r\n}\r\n\r\nexport type OutgoingPacket =\r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |\r\n    { type: \"loginWithToken\", token: string } |\r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\r\n    { type: \"contactRequest\", email: string, firstMessage: string } |\r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =\r\n    { type: \"error\", message: string } |\r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |\r\n    { type: \"message\", channelId: string, message: MessageDto } |\r\n    { type: \"conversationAdded\", conversation: ConversationDto } |\r\n    { type: \"conversationRemoved\", channelId: string } |\r\n    { type: \"user\", user: UserDto };\r\n\r\nexport class EventProducer {\r\n    private listeners: { type: string, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n}\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        super.addEventListener(type, listener, obj);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        super.removeAllEventListener(obj);\r\n    }\r\n\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = JSON.parse(e.data) as IncomingPacket;\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"register\":\r\n                    this.dispatch(\"register\");\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        }\r\n        );\r\n    }\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy();\r\n","import React, { Component } from \"react\";\r\nimport './TextInput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    componentWillReceiveProps({value}) {\r\n        this.setState({...this.state,value})\r\n    }\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\" >\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} \r\n                    { ...attrs } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './chat.d';\r\nimport { TextInput } from './TextInput'\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" alt=\"\"/>\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => this.unique_code(e)} autofocus={true} onEnter={ () => this.onClick() } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password}\r\n                    onChange={e => this.setState({ password: e })} onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={ () => this.onClick() } />}\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <button onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </button>\r\n                </p>\r\n\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    unique_code(e: string) {\r\n        if (e === \"UFFC7N\") {\r\n            this.setState({email: e, displayName: \"Richard\"});\r\n        }\r\n        this.setState({email: e});\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register) {\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        } else {\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n        }\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport { TextInput, TextInputOptions } from \"./TextInput\"\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { InboxDto, ConversationDto, proxy } from \"./chat.d\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat.d\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toDateString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\nimport React from \"react\";\r\nimport { MessageCard } from \"./MessageCard\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: \"U:\" + text\r\n        });\r\n        return true;\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto, proxy } from \"./chat.d\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Login } from './Login'\r\nimport { proxy } from './chat.d';\r\nimport { Main } from './Main';\r\nexport default class App extends Component {\r\n  state = { showLogin: true };\r\n\r\n  componentDidMount() {\r\n    proxy.addEventListener( \"login\", () => { this.setState({ showLogin: false }) });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        {this.state.showLogin ? <Login /> : <Main />}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}